import MagicString from "magic-string";
import { Program } from "estree";

//#region src/hoist.d.ts
declare function transformHoistInlineDirective(input: string, ast: Program, {
  runtime,
  directive,
  rejectNonAsyncFunction,
  ...options
}: {
  runtime: (value: string, name: string) => string;
  directive: string;
  rejectNonAsyncFunction?: boolean;
  encode?: (value: string) => string;
  decode?: (value: string) => string;
}): {
  output: MagicString;
  names: string[];
};
//#endregion
//#region src/wrap-export.d.ts
type ExportMeta = {
  declName?: string;
  isFunction?: boolean;
  defaultExportIdentifierName?: string;
};
type TransformWrapExportFilter = (name: string, meta: ExportMeta) => boolean;
declare function transformWrapExport(input: string, ast: Program, options: {
  runtime: (value: string, name: string, meta: ExportMeta) => string;
  ignoreExportAllDeclaration?: boolean;
  rejectNonAsyncFunction?: boolean;
  filter?: TransformWrapExportFilter;
}): {
  exportNames: string[];
  output: MagicString;
};
//#endregion
//#region src/proxy-export.d.ts
declare function transformDirectiveProxyExport(ast: Program, options: {
  directive: string;
  code?: string;
  runtime: (name: string) => string;
  ignoreExportAllDeclaration?: boolean;
  rejectNonAsyncFunction?: boolean;
}): {
  exportNames: string[];
  output: MagicString;
} | undefined;
declare function transformProxyExport(ast: Program, options: {
  code?: string;
  runtime: (name: string) => string;
  ignoreExportAllDeclaration?: boolean;
  rejectNonAsyncFunction?: boolean;
}): {
  exportNames: string[];
  output: MagicString;
};
//#endregion
//#region src/utils.d.ts
declare function hasDirective(body: Program["body"], directive: string): boolean;
declare function getExportNames(ast: Program, options: {
  ignoreExportAllDeclaration?: boolean;
}): {
  exportNames: string[];
};
//#endregion
//#region src/server-action.d.ts
// TODO
// source map for `options.runtime` (registerServerReference) call
// needs to match original position.
declare function transformServerActionServer(input: string, ast: Program, options: {
  runtime: (value: string, name: string) => string;
  rejectNonAsyncFunction?: boolean;
  encode?: (value: string) => string;
  decode?: (value: string) => string;
}): {
  exportNames: string[];
  output: MagicString;
} | {
  output: MagicString;
  names: string[];
};
//#endregion
export { TransformWrapExportFilter, getExportNames, hasDirective, transformDirectiveProxyExport, transformHoistInlineDirective, transformProxyExport, transformServerActionServer, transformWrapExport };