import { arrayToStream, concatArrayStream, decryptBuffer, encryptBuffer, fromBase64 } from "./encryption-utils-x_yvX0Ey.js";
import { setRequireModule } from "./rsc-CUjN7UNj.js";
import { createFromReadableStream, renderToReadableStream } from "./rsc-DnBHfHWI.js";
import * as serverReferences from "virtual:vite-rsc/server-references";

//#region src/rsc.tsx
initialize();
function initialize() {
	setRequireModule({ load: async (id) => {
		if (import.meta.env.DEV) return import(
		/* @vite-ignore */
		id);
		else {
			const import_ = serverReferences.default[id];
			if (!import_) throw new Error(`server reference not found '${id}'`);
			return import_();
		}
	} });
}
async function encryptActionBoundArgs(originalValue) {
	const serialized = renderToReadableStream(originalValue);
	const serializedBuffer = await concatArrayStream(serialized);
	return encryptBuffer(serializedBuffer, await getEncryptionKey());
}
async function decryptActionBoundArgs(encrypted) {
	const serializedBuffer = await decryptBuffer(await encrypted, await getEncryptionKey());
	const serialized = arrayToStream(new Uint8Array(serializedBuffer));
	return createFromReadableStream(serialized);
}
let keyPromise_;
function getEncryptionKey() {
	return keyPromise_ ||= crypto.subtle.importKey("raw", fromBase64(__VITE_RSC_ENCRYPTION_KEY__), { name: "AES-GCM" }, true, ["encrypt", "decrypt"]);
}

//#endregion
export { decryptActionBoundArgs, encryptActionBoundArgs };